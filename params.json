{
  "name": "Talkingjackolanterns",
  "tagline": "A Raspberry Pi project for talking Jack O Lanterns that change colour.",
  "body": "# Introduction\r\nFor my first Raspberry Pi project, I decided to create a set of talking Jack O' Lanterns. This project was inspired by the Pumpkin Pi project at [http://begillespie.github.io/Pumpkin_Pi/](http://begillespie.github.io/Pumpkin_Pi/). In this website, I detail the components I used as well as the necessary code. The full code can be found on my GitHub page at [https://github.com/SamMatt87/TalkingJackOLanterns](https://github.com/SamMatt87/TalkingJackOLanterns).\r\n\r\n# Components\r\nThe Model of Raspberry Pi that I used for this project was a Raspberry Pi 3. I used a ribbon cable with a cobbler breakout to connect to the main circuit board. I then used jumper cables to connect this to two smaller circuit boards, one for each pumpkin, in order to extend the cables so they would reach each pumpkin, I soldered each end of the jumper wires to twisted pairs of cables found in a standard cat5 cable. The smaller boards were needed in order to fit inside the pumpkin. Each board had six 10mm LEDs, two red, two green, and two yellow. One of the boards also had a pir motion sensor.\r\n\r\n# Code\r\nThe code for the pumpkins split up by their function is shown below.\r\n\r\n## Importing Modules\r\n    import RPi.GPIO as GPIO\r\n    import time\r\n    import random\r\n    import signal\r\n    import sys\r\n    import pygame\r\n    from pygame import mixer\r\n\r\n## Setting Up the Motion Sensor\r\n    GPIO.setmode(GPIO.BCM)\r\n    GPIO.setup(6, GPIO.IN)\r\n\r\n## Setting up the LEDs\r\n    leds = []\r\n    leds_left = []\r\n    leds_right = []\r\n    class LEDRight:\r\n        def __init__(self, pin):\r\n            self.pin = pin\r\n            leds_right.append(self)\r\n            leds.append(self)\r\n            GPIO.setup(self.pin, GPIO.OUT)\r\n\r\n        def on(self):\r\n            GPIO.output(self.pin, True)\r\n        \r\n        def off(self):\r\n            GPIO.output(self.pin, False)\r\n\r\n    class LEDLeft:\r\n        def __init__(self, pin):\r\n            self.pin = pin\r\n            leds_left.append(self)\r\n            leds.append(self)\r\n            GPIO.setup(self.pin, GPIO.OUT)\r\n\r\n        def on(self):\r\n            GPIO.output(self.pin, True)\r\n        \r\n        def off(self):\r\n            GPIO.output(self.pin, False)\r\n\r\n    RedLED = LEDRight(17)\r\n    YellowLED = LEDRight(27)\r\n    GreenLED = LEDRight(22)\r\n    RedLED2 = LEDLeft(18)\r\n    YellowLED2 = LEDLeft(23)\r\n    GreenLED2 = LEDLeft(24)\r\n\r\n\r\n##  Defining Lighting Sequences\r\n    def PowerOn():\r\n        for i in range(len(leds_right)):\r\n                       leds_right[i].on()\r\n        time.sleep(5)\r\n        for i in range(len(leds_right)):\r\n                       leds_right[i].off()\r\n                       leds_left[i].on()\r\n        time.sleep(5)\r\n        for i in range(len(leds_left)):\r\n                       leds_left[i].off()\r\n\r\n    \r\n    def BOO():\r\n        RedLED.on()\r\n        RedLED2.on()\r\n        time.sleep(3)\r\n        RedLED.off()\r\n        RedLED2.off()\r\n\r\n    def Scare(s):\r\n        x = 0\r\n        while x<s*5:\r\n            for i in range(len(leds_right)):\r\n                leds_right[i].on()\r\n                leds_left[i].on()\r\n                time.sleep(0.2)\r\n                leds_right[i].off()\r\n                leds_left[i].off()\r\n            x=x+1\r\n\r\n    def TalkingLeft(s):\r\n        YellowLED.on()\r\n        x = 0\r\n        while x < s:\r\n            leds_left[x % 3].on()\r\n            time.sleep(1)\r\n            leds_left[x % 3].off()\r\n            x = x+1\r\n            YellowLED.off()\r\n\r\n    def TalkingRight(s):\r\n        x = 0\r\n        YellowLED2.on()\r\n        while x < s:\r\n            leds_right[x % 3].on()\r\n            time.sleep(1)\r\n            leds_right[x % 3].off()\r\n            x = x+1\r\n        YellowLED2.off()\r\n    \r\n    def TalkingBoth(s):\r\n        x = 0\r\n        while x < s:\r\n            leds_left[x % 3].on()\r\n            leds_right[x % 3].on()\r\n            time.sleep(1)\r\n            leds_left[x % 3].off()\r\n            leds_right[x % 3].off()\r\n            x = x+1\r\n        \r\n    def Resting(s):\r\n        YellowLED.on()\r\n        YellowLED2.on()\r\n        time.sleep(s)\r\n        YellowLED.off()\r\n        YellowLED2.off()\r\n\r\n    def Laughing(s):\r\n        x=0\r\n        while x<s*5:\r\n            RedLED.on()\r\n            RedLED2.on()\r\n            time.sleep(0.1)\r\n            RedLED.off()\r\n            RedLED2.off()\r\n            GreenLED.on()\r\n            GreenLED2.on()\r\n            time.sleep(0.1)\r\n            GreenLED.off()\r\n            GreenLED2.off()\r\n            x=x+1\r\n\r\n## Executing the Sequences and Sound and Monitoring the Motion Sensor\r\n    PowerOn()\r\n\r\n    while True:\r\n        if GPIO.input(6):\r\n            print \"Trick or Treat\"\r\n            Slumber.play()\r\n            time.sleep(1)\r\n            Laughing(2)\r\n            Scare(1.5)\r\n            Resting(5)\r\n            Choose.play()\r\n            Resting(1)\r\n            Scare(3.5)\r\n            Resting(0.5)\r\n            Scare(1)\r\n            Resting(1)\r\n            TalkingBoth(3)\r\n            Resting(2)\r\n            Remember.play()\r\n            Resting(1)\r\n            TalkingBoth(6)\r\n            Greedy.play()\r\n            Resting(1.5)\r\n            Scare(1)\r\n            Laughing(10)\r\n\r\n# Result\r\nYou can see the result on Youtube at [https://www.youtube.com/watch?v=e2qxbzR1ie4](https://www.youtube.com/watch?v=e2qxbzR1ie4) and a nighttime version at [https://www.youtube.com/watch?v=CApgn8pcvtQ](https://www.youtube.com/watch?v=CApgn8pcvtQ)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}